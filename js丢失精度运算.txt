//除法
    numDiv (arg1, arg2) {
      if (arg1 && arg2) {
        var r1 = arg1.toString(), r2 = arg2.toString(), m, resultVal, d = 6;
        m = (r2.split(".")[1] ? r2.split(".")[1].length : 0)
          - (r1.split(".")[1] ? r1.split(".")[1].length : 0);
        resultVal = Number(r1.replace(".", "")) / Number(r2.replace(".", ""))
          * Math.pow(10, m);
        return typeof d !== "number" ? Number(resultVal) : Number(resultVal
          .toFixed(parseInt(6)));
      } else {
        return arg1
      }
    },
    // 减法
    Subtr (arg1, arg2) {
      if (arg1 && arg2) {
        var r1, r2, m, n;
        try { r1 = arg1.toString().split(".")[1].length } catch (e) { r1 = 0 }
        try { r2 = arg2.toString().split(".")[1].length } catch (e) { r2 = 0 }
        m = Math.pow(10, Math.max(r1, r2));
        n = (r1 >= r2) ? r1 : r2;
        return ((arg1 * m - arg2 * m) / m).toFixed(n);
      } else {
        return arg1
      }

    },
    // 加法
    accAdd (arg1, arg2) {
      var r1, r2, m;
      try { r1 = arg1.toString().split(".")[1].length } catch (e) { r1 = 0 }
      try { r2 = arg2.toString().split(".")[1].length } catch (e) { r2 = 0 }
      m = Math.pow(10, Math.max(r1, r2))
      return (arg1 * m + arg2 * m) / m
    },
    //乘法 
    accMul (arg1, arg2) {
      if (arg1 && arg2) {
        var m = 0, s1 = arg1.toString(), s2 = arg2.toString();
        try { m += s1.split(".")[1].length } catch (e) { }
        try { m += s2.split(".")[1].length } catch (e) { }
        return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m)
      } else {
        return arg1
      }

    },