    //保留四位小数
    toDecimal4 (x) {
      var f = parseFloat(x)
      if (isNaN(f)) {
        return false
      }
      var f = Math.round(x * 10000) / 10000
      var s = f.toString()
      var rs = s.indexOf('.')
      if (rs < 0) {
        rs = s.length
        s += '.'
      }
      while (s.length <= rs + 2) {
        s += '0'
      }
      return s / 1
    },
    //保留两位小数
    toDecimal2 (x) {
      var f = parseFloat(x)
      if (isNaN(f)) {
        return false
      }
      var f = Math.round(x * 100) / 100
      var s = f.toString()
      var rs = s.indexOf('.')
      if (rs < 0) {
        rs = s.length
        s += '.'
      }
      while (s.length <= rs + 2) {
        s += '0'
      }
      return s / 1
    },
    //除法 万方转方
    numDiv1 (arg1) {
      // let arg2 = 10000
      let arg2 = 1
      if (arg1 && arg2) {
        var r1 = arg1.toString(),
          r2 = arg2.toString(),
          m,
          resultVal,
          d = 10
        m =
          (r2.split('.')[1] ? r2.split('.')[1].length : 0) -
          (r1.split('.')[1] ? r1.split('.')[1].length : 0)
        resultVal =
          (Number(r1.replace('.', '')) / Number(r2.replace('.', ''))) *
          Math.pow(10, m)
        return typeof d !== 'number'
          ? Number(resultVal)
          : Number(resultVal.toFixed(parseInt(10)))
      } else {
        return arg1
      }
    },
    //乘法 方转万方
    accMul (arg1) {
      let arg2 = 1
      if (arg1 && arg2) {
        var m = 0,
          s1 = arg1.toString(),
          s2 = arg2.toString()
        try {
          m += s1.split('.')[1].length
        } catch (e) { }
        try {
          m += s2.split('.')[1].length
        } catch (e) { }
        return (
          (Number(s1.replace('.', '')) * Number(s2.replace('.', ''))) /
          Math.pow(10, m)
        )
      } else {
        return arg1
      }
    },